# -*- coding: utf-8 -*-
"""10_Funciones.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kv6Tq-6Sp_FQgamgnGvgMpcS1qQboNJI

# Funciones
Una función es un bloque reutilizable de código o declaraciones de programación diseñadas para realizar una determinada tarea.

Para declarar una función en Python deberemos usar la palabra clave def. El bloque de función de código se ejecuta solo si se llama o invoca la función.
"""

#sintaxis
#Declarar una funcion
def function_name():
  codes
  codes
  
  #Llamar a una funcion
function_name()

"""# funciones sin parametros"""

def adicion():
  a = 2
  b = 3
  total = a + b
  #print(total)

adicion()

"""# Retornar valores de una funcion
para retornar un valor de una funcion nosotros usamos la palabra return, seguida de la variable que vamos a retornar.

Si no lo hace su valor final sera **"None"**
"""

def adicion():
  a = 2
  b = 3
  total = a + b
  #print(total)
  
print(adicion())

def adicion():
  a = 2
  b = 3
  total = a + b
  return total

"""# Funciones con parametros
a las funciones podemos añadirles parametros para qye trabajen con valores integrados por el usuario
"""

def adicion(a,b):
  total = a+b
  return total

  print(adicion(1,2))

"""# argumentos de tipo key:value"""

def person_info(name, last_name, career):
  print(f'hola', {name} {last_name}, gracias por escoger la carrera de {career}, comencemos con la seleccion')

print(person)

"""# tipos de valores para retornar"""

#strings
def name(name):
  return name

name('Erick')

#booleanos
def is_pair(n):
  if n%2 == 0:
    return True
  return False

print(is_pair(8))
print(is_pair(5))

#listas
def find_pair(n):
  pairs = []
  for i in range(n+1):
    if i%2 == 0:
        pairs.append(i)
  return pairs

print(find_pair(10))