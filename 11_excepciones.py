# -*- coding: utf-8 -*-
"""11_excepciones.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fX8hBZ5r94TgBIZ5uw0lQU7oMF8cCJ9W

# Excepciones
Las excepciones son utilizadas para el manejo de errores. Cuando se trata de errores, en cuanto, menos tengamos mejor, sin embargo es cierto tambien que estos son inevitables siempre estamos propensos a encontrar un error o **Bug** dentro de nuestros programas.

conociendo esto y tomando en cuenta que los errores son parte del dia a dia del desarrollador, para evitar que nuestra aplicacion se cierre al momento de ejecutarla y la experiencia del usuario en nuestro sistema sea mala, vamos hacer uso de las excepciones.
"""

#sintaxis
try:
  run this code
except:
    execute this code when there is an error
else:
    whitout errors? Run this code.
finally:
      always run this code

"""# Ejemplo del error"""

numberOne = 5
numberTwo = 1
numberTwo = '1'

print(numberOne + numberTwo)
#el tener un error directo en cosola significa nuestro programa se muriooooh

"""# aplicando try - except"""

#try - Except
try:
  print(numberOne + numberTwo)
  print('no hay ningun error')
except:
    #se ejecutara si se produce una excepcion
    print('se ha producido un error')

"""# Aplicando Try - Except - Else"""

#Try - Except - Else(opcional) - finally(opcional)
numberOne = 1
numberTwo = 2
#numberTwo = '2'

try:
  print(numberOne + numberTwo)
  print('no hay ningun error')
except:
    print('se ha producido un error')
else:
    #se ejecutara si no se produce ninguna excepcion

    print('la ejecucion continua correctamente')

"""# Aplicando Try - Except - Else - Finally"""

try:
  print(numberOne + numberTwo)
  print('no hay ningun error')
except:
    print('se ha producido un error')
else:
    print('la ejecucion continua correctamente')
finally:
    #esto siempre se ejecuta
    print('la ejecucion sigue')

"""# analizando tipos de errores

"""

numberOne = 5 #si este digito
numberTwo = 1 #y este otro llegaran a estar mal escritos marcaria error
number = '1'

print(numberOne + numberTwo)

try:
  print(numberOne + numberTwo)
  print('no hay ningun error')
except TypeError:
    #se ejecuta unicamente si el error es en el tipo de dato
    print('se ha producido un error')

#solucionando el error
try:
  print(numberOne + numberTwo)
  print('no hay ningun error')
except TypeError:
    print('hubo un error')
    print('pero ya lo arregle')
    fixOne = int(numberOne)
    fixTwo = int(numbertwo)
    print(fixOne + fixTwo)

#hay muchos tipos de errores
try:
  print(numberOne + numberTwo)
  print('no hay nigun error')
except ValueError:
  print('Hubo un error')

try:
  print(numberOne + numberTwo)
  print('no hay ningun error')
except TypeError:
    print('se ha producido un TypeError')
except ValueError:
    print('hubo un error de valor')

"""lo normal y correcto  es que nosotros sepamos que se esta ejecutando y en que estamos mal y el tipo de error que se pudiera cometer y solucionarlo con estos bloques de codigos

# Captura del tipo de excepcion
"""

numberOne = 5
numberTwo = 1
numberTwo = '1'

try:
  print(numberOne + numberTwo)
  print('no hay ningun error')
except TypeError as e:
    print(e)

  #asignamos el error ocurrido a una variable e imprimos la informacion de nuestro error
  #Esto funciona mayormente en vscode, trabajando desde colab tenemos esta informacion desde el